name: Java CI/CD with Gradle

# 워크플로우가 실행될 시점
on:
  # master 브랜치에 push 이벤트가 발생했을 때
  push:
    branches: [ "master" ]
  # master 브랜치로 pull request 이벤트가 발생했을 때
  pull_request:
    branches: [ "master" ]
  workflow_dispatch:


jobs:
  # 서비스 빌드 단계
  build:
    # 작업 환경을 지정합니다.
    # self-hosted runner를 사용하므로 'self-hosted'로 설정
    runs-on: self-hosted

    steps:
      # 소스 코드 체크아웃
      - name: Checkout
        uses: actions/checkout@v4

      # JDK 17 설정
      # runner에 Java 17 환경을 설정
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # Gradle 실행 권한 부여
      # gradlew 파일에 실행 권한을 부여
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # Gradle 빌드 및 테스트
      # 애플리케이션을 빌드하고 단위 테스트를 실행
      - name: Build with Gradle
        run: ./gradlew build

      # GitHub Secrets에 저장된 정보를 사용하여 Docker Hub에 로그인
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Docker 이미지 빌드
      # 이 단계에서 GitHub PATH 를 환경 변수로 주입합니다.
      - name: Build Docker image
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}
        run: docker compose build

      # Docker 컨테이너 배포
      # 새로 빌드된 이미지를 사용하여 컨테이너를 실행(배포)
      - name: Deploy with Docker Compose
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}
        run: docker compose up -d

